name: Auto Release

on:
  push:
    branches:
      - main
      - develop

jobs:
  release:
    runs-on: ubuntu-latest
    env:
      NODE_ENV: production
    steps:
      # 1️⃣ Checkout full history so all tags are available
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # 2️⃣ Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 22

      # 3️⃣ Setup pnpm
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10

      # 4️⃣ Install dependencies
      - run: pnpm install

      # 5️⃣ Lint & test
      - run: pnpm run lint
      - run: pnpm test

      # 6️⃣ Determine environment
      - name: Determine environment
        run: |
          if [ "${GITHUB_REF_NAME}" == "develop" ]; then
            echo "ENV=development" >> $GITHUB_ENV
          else
            echo "ENV=production" >> $GITHUB_ENV
          fi


      # 7️⃣ Bump version based on latest tag
      - name: Bump version
        run: |
          # Get latest tag from Git
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "Latest tag: $LATEST_TAG"
      
          # Strip leading 'v' for version calculation
          LATEST_VERSION=${LATEST_TAG#v}
      
          if [ "${GITHUB_REF_NAME}" == "develop" ]; then
            # Bump prerelease based on latest version
            NEXT_VERSION=$(npm version prerelease --preid alpha --no-git-tag-version --allow-same-version)
          else
            # Bump patch based on latest version
            NEXT_VERSION=$(npm version patch --no-git-tag-version --allow-same-version)
          fi
      
          # Read new version from package.json
          VERSION=$(node -p "require('./package.json').version")
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "VERSION=$VERSION"

      # 8️⃣ Create GitHub Release (creates tag remotely)
      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          tag: "v${{ env.VERSION }}"
          name: "Release v${{ env.VERSION }}"
          body: "Automated release from commit ${{ github.sha }} on branch ${{ github.ref_name }}"
          token: ${{ secrets.GH_PAT }}
          skipIfReleaseExists: true
